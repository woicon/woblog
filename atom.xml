<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[woiconBlog]]></title>
  <link href="/atom.xml/atom.xml" rel="self"/>
  <link href="/atom.xml/"/>
  <updated>2017-03-19T21:22:58+08:00</updated>
  <id>/atom.xml/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[WOUI的CSS的编写规范]]></title>
    <link href="/atom.xml/14889572496788.html"/>
    <updated>2017-03-08T15:14:09+08:00</updated>
    <id>/atom.xml/14889572496788.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">写在前面</h3>

<p>所有的CSS语法是不区分大小写的ASCII范围（即，i.e., [a-z] and [A-Z]是等价的）中，除了部分不属于CSS的控制之下。例如，在HTML中值的区分大小写属性“ID”的字体名称和“class”，和URI就在于本规范的范围之内。请特别注意，元素名称是不区分大小写的HTML，但区分大小写的XML。</p>

<h3 id="toc_1">使用less预编译提高效率</h3>

<p>层级深度不超过三级。</p>

<h2 id="toc_2">书写规则</h2>

<h3 id="toc_3">class命名</h3>

<p>class 名称中只能出现小写字符和连字符（不是下划线，也不是驼峰命名法）。连字符应当用于相关 class 的命名（类似于命名空间）（例如，.btn 和 .btn-danger）。<br/>
避免过度任意的简写。.btn 代表 button，但是 .s 不能表达任何意思。<br/>
class 名称应当尽可能短，并且意义明确。<br/>
使用有意义的名称。使用有组织的或目的明确的名称，不要使用表现形式（presentational）的名称。<br/>
基于最近的父 class 或基本（base） class 作为新 class 的前缀。<br/>
使用 .js-* class 来标识行为（与样式相对），并且不要将这些 class 包含到 CSS 文件中。</p>

<h3 id="toc_4">避免过深的层级</h3>

<h3 id="toc_5">CSS属性书写顺序</h3>

<p>1.位置属性(position, top, right, z-index, display, float等)<br/>
2.大小(width, height, padding, margin)<br/>
3.文字系列(font, line-height, letter-spacing, color- text-align等)<br/>
4.背景(background, border等)<br/>
5.其他(animation, transition等)</p>

<h3 id="toc_6">使用缩写</h3>

<p>CSS有些属性是可以缩写的，比如padding,margin,font等等，这样精简代码同时又能提高用户的阅读体验。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阿米巴经营]]></title>
    <link href="/atom.xml/14882775961284.html"/>
    <updated>2017-02-28T18:26:36+08:00</updated>
    <id>/atom.xml/14882775961284.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[module.exports浅析]]></title>
    <link href="/atom.xml/14882686442912.html"/>
    <updated>2017-02-28T15:57:24+08:00</updated>
    <id>/atom.xml/14882686442912.html</id>
    <content type="html"><![CDATA[
<p>在开发一个复杂的应用程序的时候，我们需要把各个功能拆分、封装到不同的文件，在需要的时候引用该文件。没人会写一个几万行代码的文件，这样在可读性、复用性和维护性上都很差，几乎所有的编程语言都有自己的模块组织方式，比如Java中的包、C#中的程序集等，node.js使用模块和包来组织，其机制实现参照了CommonJS标准，虽未完全遵守，但差距不大，使用起来非常简单。</p>

<h3 id="toc_0">什么是模块？</h3>

<p>在node.js中模块与文件是一一对应的，也就是说一个node.js文件就是一个模块，文件内容可能是我们封装好的一些JavaScript方法、JSON数据、编译过的C/C++拓展等，在关于node.js的误会提到过node.js的架构。<br/>
其中http、fs、net等都是node.js提供的核心模块，使用C/C++实现，外部用JavaScript封装。</p>

<h3 id="toc_1">创建、加载模块</h3>

<p>模块在node.js中的概念很简单，看看如何创建一个我们自己的模块供开发复用。</p>

<p>在node.js中创建模块非常简单，一个文件就是一个模块，所以我们创建一个test.js文件就创建了一个模块</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[webpack入坑记录]]></title>
    <link href="/atom.xml/14882669814482.html"/>
    <updated>2017-02-28T15:29:41+08:00</updated>
    <id>/atom.xml/14882669814482.html</id>
    <content type="html"><![CDATA[
<p>Webpack 会分析入口文件，解析包含依赖关系的各个文件。这些文件（模块）都打包到 bundle.js 。Webpack 会给每个模块分配一个唯一的 id 并通过这个 id 索引和访问模块。在页面启动时，会先执行 entry.js 中的代码，其它模块会在运行 require 的时候再执行。</p>

<h3 id="toc_0">Loader</h3>

<p>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。</p>

<p>Loader 可以理解为是模块和资源的转换器，它本身是一个函数，接受源文件作为参数，返回转换的结果。这样，我们就可以通过 require 来加载任何类型的模块或文件，比如 CoffeeScript、 JSX、 LESS 或图片。</p>

<p><strong>loader 有哪些特性？</strong><br/>
Loader 可以通过管道方式链式调用，每个 loader 可以把资源转换成任意格式并传递给下一个 loader ，但是最后一个 loader 必须返回 JavaScript。<br/>
Loader 可以同步或异步执行。<br/>
Loader 运行在 node.js 环境中，所以可以做任何可能的事情。<br/>
Loader 可以接受参数，以此来传递配置项给 loader。<br/>
Loader 可以通过文件扩展名（或正则表达式）绑定给不同类型的文件。<br/>
Loader 可以通过 npm 发布和安装。<br/>
除了通过 package.json 的 main 指定，通常的模块也可以导出一个 loader 来使用。<br/>
Loader 可以访问配置。<br/>
插件可以让 loader 拥有更多特性。<br/>
Loader 可以分发出附加的任意文件。<br/>
Loader 本身也是运行在 node.js 环境中的 JavaScript 模块，它通常会返回一个函数。大多数情况下，我们通过 npm 来管理 loader，但是你也可以在项目中自己写 loader 模块。<br/>
Loader 可以在 require() 引用模块的时候添加，也可以在 webpack 全局配置中进行绑定，还可以通过命令行的方式使用。</p>

<h3 id="toc_1">配置文件</h3>

<p>Webpack 在执行的时候，除了在命令行传入参数，还可以通过指定的配置文件来执行。默认情况下，会搜索当前目录的 webpack.config.js 文件，这个文件是一个 node.js 模块，返回一个 json 格式的配置信息对象，或者通过 &ndash;config 选项来指定配置文件。</p>

<pre><code class="language-{">  &quot;name&quot;: &quot;webpack-example&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;A simple webpack example.&quot;,
  &quot;main&quot;: &quot;bundle.js&quot;,
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;
  },
  &quot;keywords&quot;: [
    &quot;webpack&quot;
  ],
  &quot;author&quot;: &quot;zhaoda&quot;,
  &quot;license&quot;: &quot;MIT&quot;,
  &quot;devDependencies&quot;: {
    &quot;css-loader&quot;: &quot;^0.21.0&quot;,
    &quot;style-loader&quot;: &quot;^0.13.0&quot;,
    &quot;webpack&quot;: &quot;^1.12.2&quot;
  }
}
</code></pre>

<h3 id="toc_2">commonJS规范</h3>

<p>CommonJS规范包括了模块（modules）、包（packages）、系统（system）、二进制（binary）、控制台（console）、编码（encodings）、文件系统（filesystems）、套接字（sockets）、单元测试（unit testing）等部分。目前大部分标准都在拟定和讨论之中，已经发布的标准有Modules/1.0、Modules/1.1、Modules/1.1.1、Packages/1.0、System/1.0。</p>

<h3 id="toc_3">AMD规范</h3>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微信小程序中使用字体图标]]></title>
    <link href="/atom.xml/14882669616759.html"/>
    <updated>2017-02-28T15:29:21+08:00</updated>
    <id>/atom.xml/14882669616759.html</id>
    <content type="html"><![CDATA[
<p>最近在做小程序方面的工作,小程序icon组件图标很少,又不想使用css背景图或者直接引入imgage,直接@font-face .ttf .woff字体，会有跨域问题。写到页面里吧。</p>

<p>只能转base64了吧，而且纯手工转，icomoon Encode embed css不知道从什么时候起已经开始收费了😭<br/>
在线转换网址：<a href="https://www.giftofspeed.com/base64-encoder/">https://www.giftofspeed.com/base64-encoder/</a></p>

<pre><code class="language-@font-face">font-family:&#39;font-name&#39;;
src:url(data:application/x-font-ttf;charset=utf-8;base64,*** format(&#39;truetype&#39;);
</code></pre>

<p>在小程序内就不存在字体格式兼容性问题，用ttf就行了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[es6学习笔记]]></title>
    <link href="/atom.xml/14890321432064.html"/>
    <updated>2017-03-09T12:02:23+08:00</updated>
    <id>/atom.xml/14890321432064.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git远程操作]]></title>
    <link href="/atom.xml/14882736341680.html"/>
    <updated>2017-02-28T17:20:34+08:00</updated>
    <id>/atom.xml/14882736341680.html</id>
    <content type="html"><![CDATA[
<p><strong>git分支操作</strong><br/>
git查看本地分支，带星号的为当前开发的分支。</p>

<pre><code>$git branch -a //查看所有分支      
master
* newblog

$git push origin :master;//删除远程master分支
$git branch -D newbranch;//删除本地master分支
$git checkout newbranch//切换分支
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[flex布局实践]]></title>
    <link href="/atom.xml/css&flex.html"/>
    <updated>2017-03-19T15:06:44+08:00</updated>
    <id>/atom.xml/css&flex.html</id>
    <content type="html"><![CDATA[
<p>布局的传统解决方案，基于盒状模型，依赖 display属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。<br/>
2009年，W3C提出了一种新的方案—-Flex布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p>

<p><strong>1. Flex布局是什么？</strong><br/>
Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br/>
任何一个容器都可以指定为Flex布局。</p>

<pre><code>.box{
  display: flex;
}
</code></pre>

<p>行内元素也可以使用Flex布局。</p>

<pre><code>.box{
  display: inline-flex;
}
</code></pre>

<p>Webkit内核的浏览器，必须加上-webkit前缀。</p>

<pre><code>.box{
  display: -webkit-flex; /* Safari */
  display: flex;
}
</code></pre>

<blockquote>
<p>注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。</p>
</blockquote>

]]></content>
  </entry>
  
</feed>
