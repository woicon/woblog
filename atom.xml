<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[woiconBlog]]></title>
  <link href="/atom.xml/atom.xml" rel="self"/>
  <link href="/atom.xml/"/>
  <updated>2017-05-03T10:48:48+08:00</updated>
  <id>/atom.xml/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[HTML5 进阶系列：拖放 API 实现拖放排序]]></title>
    <link href="/atom.xml/14937786660187.html"/>
    <updated>2017-05-03T10:31:06+08:00</updated>
    <id>/atom.xml/14937786660187.html</id>
    <content type="html"><![CDATA[
<p>HTML5 中提供了直接拖放的 API，极大的方便我们实现拖放效果，不需要去写一大堆的 js，只需要通过监听元素的拖放事件就能实现各种拖放功能。</p>

<p>想要拖放某个元素，必须设置该元素的 draggable 属性为 true，当该属性为 false 时，将不允许拖放。而 img 元素和 a 元素都默认设置了 draggable 属性为 true，可直接拖放，如果不想拖放这两个元素，把属性设为 false 即可。</p>

<h2 id="toc_0">拖放事件</h2>

<p>拖放事件由不同的元素产生。一个元素被拖放，他可能会经过很多个元素上，最终到达想要放置的元素内。这里，我暂时把被拖放的元素称为源对象，被经过的元素称为过程对象，到达的元素我称为目标对象。不同的对象产生不同的拖放事件。</p>

<h2 id="toc_1">源对象：</h2>

<ul>
<li><p>dragstart：源对象开始拖放。</p></li>
<li><p>drag：源对象拖放过程中。</p></li>
<li><p>dragend：源对象拖放结束。</p></li>
</ul>

<h2 id="toc_2">过程对象：</h2>

<ul>
<li><p>dragenter：源对象开始进入过程对象范围内。</p></li>
<li><p>dragover：源对象在过程对象范围内移动。</p></li>
<li><p>dragleave：源对象离开过程对象的范围。</p></li>
</ul>

<h2 id="toc_3">目标对象：</h2>

<ul>
<li>drop：源对象被拖放到目标对象内。</li>
</ul>

<pre><code>&lt;div id=&quot;source&quot; draggable=&quot;true&quot;&gt;a元素&lt;/div&gt;
&lt;div id=&quot;process&quot;&gt;b元素&lt;/div&gt;
&lt;div id=&quot;target&quot;&gt;c元素&lt;/div&gt;
&lt;script&gt;
    var source = document.getElementById(&#39;source&#39;),     // a元素
        process = document.getElementById(&#39;process&#39;),   // b元素
        target = document.getElementById(&#39;target&#39;);     // c元素
    
    source.addEventListener(&#39;dragstart&#39;,function(ev){   // dragstart事件由a元素产生
        console.log(&#39;a元素开始被拖动&#39;);
    },false)

    process.addEventListener(&#39;dragenter&#39;,function(ev){  // dragenter事件由b元素产生
        console.log(&#39;a元素开始进入b元素&#39;);
    },false)
    process.addEventListener(&#39;dragleave&#39;,function(ev){  // dragleave事件由b元素产生
        console.log(&#39;a元素离开b元素&#39;);
    },false)

    target.addEventListener(&#39;drop&#39;,function(ev){        // drop事件由c元素产生
        console.log(&#39;a元素拖放到c元素了&#39;);
        ev.preventDefault();
    },false)
    document.ondragover = function(e){e.preventDefault();}
&lt;/script&gt;
</code></pre>

<h2 id="toc_4">dataTransfer 对象</h2>

<p>在所有拖放事件中提供了一个数据传递对象 dataTransfer，用于在源对象和目标对象间传递数据。接下来认识一下这个对象的方法和属性，来了解它是如何传递数据的。</p>

<h2 id="toc_5">setData()</h2>

<p>该方法向 dataTransfer 对象中存入数据。接收两个参数，第一个表示要存入数据种类的字符串，现在支持有以下几种：</p>

<p>text/plain：文本文字。</p>

<p>text/html：HTML文字。</p>

<p>text/xml：XML文字。</p>

<p>text/uri-list：URL列表，每个URL为一行。</p>

<p>第二个参数为要存入的数据。例如：</p>

<p><code><br/>
event.dataTransfer.setData(&#39;text/plain&#39;,&#39;Hello World&#39;);<br/>
getData()<br/>
</code></p>

<p>该方法从 dataTransfer 对象中读取数据。参数为在 setData 中指定的数据种类。例如：</p>

<p><code><br/>
event.dataTransfer.getData(&#39;text/plain&#39;);<br/>
clearData()<br/>
</code></p>

<p>该方法清除 dataTransfer 对象中存放的数据。参数可选，为数据种类。若参数为空，则清空所有种类的数据。例如：</p>

<h2 id="toc_6">event.dataTransfer.clearData();</h2>

<h2 id="toc_7">setDragImage()</h2>

<p>该方法通过用img元素来设置拖放图标。接收三个参数，第一个为图标元素，第二个为图标元素离鼠标指针的X轴位移量，第三个为图标元素离鼠标指针的Y轴位移量。例如：</p>

<pre><code>var source = document.getElementById(&#39;source&#39;),
    icon = document.createElement(&#39;img&#39;);

icon.src = &#39;img.png&#39;;

source.addEventListener(&#39;dragstart&#39;,function(ev){
    ev.dataTransfer.setDragImage(icon,-10,-10)
},false)
</code></pre>

<h2 id="toc_8">effectAllowed 和 dropEffect 属性</h2>

<p>这两个属性结合起来设置拖放的视觉效果。</p>

<p>值得注意的是：dataTransfer 对象不支持IE。对，不支持IE。</p>

<p>实现拖放排序</p>

<p>上面已经熟悉了拖放 API 的使用，我们来实现个简单的拖放排序，这也是在项目中比较常见的。先来理一下思路：</p>

<p>在一个列表中，每个元素都可以被拖放，那首先要给每个元素设置 draggable 属性为 true。</p>

<p>监听每个元素的 dragstart 事件，对源对象做样式处理来区分。</p>

<p>监听每个元素的 dragenter 事件，当源对象进入到当前元素里，就把源对象添加到该元素之前。这样子后面的元素就会被源对象挤下去了，实现了排序的效果。</p>

<p>但是会发现，源对象无法排到最后一个去，只能在倒数第二。这时就要监听 dragleave 事件，当过程对象是最后一个元素时，源对象离开了过程对象，这时就把源对象添加到最后去。</p>

<p>主要代码如下：</p>

<pre><code>var source = document.querySelectorAll(&#39;.list&#39;),
    dragElement = null;

for(var i = 0; i &lt; source.length; i++){
    source[i].addEventListener(&#39;dragstart&#39;,function(ev){
        dragElement = this;
    },false);

    source[i].addEventListener(&#39;dragenter&#39;, function(ev){
        if(dragElement != this){
            this.parentNode.insertBefore(dragElement,this);
        }
    }, false)

    source[i].addEventListener(&#39;dragleave&#39;, function(ev){
        if(dragElement != this){
            if(this == this.parentNode.lastElementChild || this == this.parentNode.lastChild){
                this.parentNode.appendChild(dragElement);
            }
        }
    }, false)
};

document.ondragover = function(e){e.preventDefault();}
document.ondrop = function(e){e.preventDefault();}
</code></pre>

<h2 id="toc_9">兼容</h2>

<p>主要是在IE中的兼容不太好，不过至少在IE10中能兼容上面的拖动排序。</p>

<p>而且在我简单的试验中发现，就是在 IE 中元素不设置 height 的时候，不会触发 dragleave 事件。</p>

<p>更重要的一点是在 ios 和安卓上，完全不兼容。不过还好，有一个插件能让它在移动端完美兼容。<br/>
插件地址：ios-html5-drag-drop-shim</p>

<p>只需要在原有的代码中引入该插件，即可在移动端上实现拖动了。</p>

<pre><code>&lt;script&gt;
var iosDragDropShim = { enableEnterLeave: true }
&lt;/script&gt;
&lt;script src=&quot;vendor/ios-drag-drop.js&quot;&gt;&lt;/script&gt;
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript animatio动画事件]]></title>
    <link href="/atom.xml/14930210074983.html"/>
    <updated>2017-04-24T16:03:27+08:00</updated>
    <id>/atom.xml/14930210074983.html</id>
    <content type="html"><![CDATA[
<p>判断css animatio动画是否完成， animationend是判断css3在动画完成后执行事件。</p>

<pre><code>object.addEventListener(&quot;webkitAnimationEnd&quot;, myScript);  // Chrome, Safari 和 Opera
object.addEventListener(&quot;animationend&quot;, myScript);        // 标准语法
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GARMIN 225蓝牙连接问题]]></title>
    <link href="/atom.xml/14927366229693.html"/>
    <updated>2017-04-21T09:03:42+08:00</updated>
    <id>/atom.xml/14927366229693.html</id>
    <content type="html"><![CDATA[
<p>手表最近总是连接不上手机。<br/>
1. 手表关机，关闭手机蓝牙；<br/>
2. 等待五秒后，同时按住B键+C键；<br/>
3. 步骤2按住不放，再按住A键不放，此时同时按住ABC三个键；<br/>
4. 等待几秒, 听到哔一声，放开A键，此时仍同时按住BC两个键<br/>
5. 等待几秒（可能会很长时间，耐心等），听到哔一声，放开C键;<br/>
6. 等待几秒, 听到哔一声， 放开B键；<br/>
7. 成功后会出现第一次开机的情况（显示简体中文字样）， 可以接着把225的各项设置逐一完成；<br/>
8. 把手机Connect APP中注册的225手表先删除；<br/>
9. 手机重新开机，开启蓝牙；<br/>
10. 开启手表225的蓝牙配对，设置&gt;蓝牙&gt;移动设备配对<br/>
11. 开启手机Garmin Connect app，设备&gt; &ldquo;+&rdquo;&gt; 健身 &gt; forerunner 225 &gt;搜寻。</p>

<p>以上做完后, 就会看到手机上出现询问配对码是否正确的对话框，确定之后就会连接、注册且完成同步了。<br/>
以后只要开启Garmin connect, 按手表的跑步键两次，等待几秒，就会正常同步。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[es6入门]]></title>
    <link href="/atom.xml/14926503124149.html"/>
    <updated>2017-04-20T09:05:12+08:00</updated>
    <id>/atom.xml/14926503124149.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">let和const命令</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式开发实践]]></title>
    <link href="/atom.xml/14901536948215.html"/>
    <updated>2017-03-22T11:34:54+08:00</updated>
    <id>/atom.xml/14901536948215.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WOUI的CSS的编写规范]]></title>
    <link href="/atom.xml/14889572496788.html"/>
    <updated>2017-03-08T15:14:09+08:00</updated>
    <id>/atom.xml/14889572496788.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">写在前面</h3>

<p>所有的CSS语法是不区分大小写的ASCII范围（即，i.e., [a-z] and [A-Z]是等价的）中，除了部分不属于CSS的控制之下。例如，在HTML中值的区分大小写属性“ID”的字体名称和“class”，和URI就在于本规范的范围之内。请特别注意，元素名称是不区分大小写的HTML，但区分大小写的XML。</p>

<h3 id="toc_1">使用less预编译提高效率</h3>

<p>层级深度不超过三级。</p>

<h2 id="toc_2">书写规则</h2>

<h3 id="toc_3">class命名</h3>

<p>class 名称中只能出现小写字符和连字符（不是下划线，也不是驼峰命名法）。连字符应当用于相关 class 的命名（类似于命名空间）（例如，.btn 和 .btn-danger）。<br/>
避免过度任意的简写。.btn 代表 button，但是 .s 不能表达任何意思。<br/>
class 名称应当尽可能短，并且意义明确。<br/>
使用有意义的名称。使用有组织的或目的明确的名称，不要使用表现形式（presentational）的名称。<br/>
基于最近的父 class 或基本（base） class 作为新 class 的前缀。<br/>
使用 .js-* class 来标识行为（与样式相对），并且不要将这些 class 包含到 CSS 文件中。</p>

<h3 id="toc_4">避免过深的层级</h3>

<h3 id="toc_5">CSS属性书写顺序</h3>

<p>1.位置属性(position, top, right, z-index, display, float等)<br/>
2.大小(width, height, padding, margin)<br/>
3.文字系列(font, line-height, letter-spacing, color- text-align等)<br/>
4.背景(background, border等)<br/>
5.其他(animation, transition等)</p>

<h3 id="toc_6">使用缩写</h3>

<p>CSS有些属性是可以缩写的，比如padding,margin,font等等，这样精简代码同时又能提高用户的阅读体验。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阿米巴经营]]></title>
    <link href="/atom.xml/14882775961284.html"/>
    <updated>2017-02-28T18:26:36+08:00</updated>
    <id>/atom.xml/14882775961284.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[module.exports浅析]]></title>
    <link href="/atom.xml/14882686442912.html"/>
    <updated>2017-02-28T15:57:24+08:00</updated>
    <id>/atom.xml/14882686442912.html</id>
    <content type="html"><![CDATA[
<p>在开发一个复杂的应用程序的时候，我们需要把各个功能拆分、封装到不同的文件，在需要的时候引用该文件。没人会写一个几万行代码的文件，这样在可读性、复用性和维护性上都很差，几乎所有的编程语言都有自己的模块组织方式，比如Java中的包、C#中的程序集等，node.js使用模块和包来组织，其机制实现参照了CommonJS标准，虽未完全遵守，但差距不大，使用起来非常简单。</p>

<h3 id="toc_0">什么是模块？</h3>

<p>在node.js中模块与文件是一一对应的，也就是说一个node.js文件就是一个模块，文件内容可能是我们封装好的一些JavaScript方法、JSON数据、编译过的C/C++拓展等，在关于node.js的误会提到过node.js的架构。<br/>
其中http、fs、net等都是node.js提供的核心模块，使用C/C++实现，外部用JavaScript封装。</p>

<h3 id="toc_1">创建、加载模块</h3>

<p>模块在node.js中的概念很简单，看看如何创建一个我们自己的模块供开发复用。</p>

<p>在node.js中创建模块非常简单，一个文件就是一个模块，所以我们创建一个test.js文件就创建了一个模块</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[webpack入坑记录]]></title>
    <link href="/atom.xml/14882669814482.html"/>
    <updated>2017-02-28T15:29:41+08:00</updated>
    <id>/atom.xml/14882669814482.html</id>
    <content type="html"><![CDATA[
<p>Webpack 会分析入口文件，解析包含依赖关系的各个文件。这些文件（模块）都打包到 bundle.js 。Webpack 会给每个模块分配一个唯一的 id 并通过这个 id 索引和访问模块。在页面启动时，会先执行 entry.js 中的代码，其它模块会在运行 require 的时候再执行。</p>

<h3 id="toc_0">Loader</h3>

<p>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。</p>

<p>Loader 可以理解为是模块和资源的转换器，它本身是一个函数，接受源文件作为参数，返回转换的结果。这样，我们就可以通过 require 来加载任何类型的模块或文件，比如 CoffeeScript、 JSX、 LESS 或图片。</p>

<p><strong>loader 有哪些特性？</strong><br/>
Loader 可以通过管道方式链式调用，每个 loader 可以把资源转换成任意格式并传递给下一个 loader ，但是最后一个 loader 必须返回 JavaScript。<br/>
Loader 可以同步或异步执行。<br/>
Loader 运行在 node.js 环境中，所以可以做任何可能的事情。<br/>
Loader 可以接受参数，以此来传递配置项给 loader。<br/>
Loader 可以通过文件扩展名（或正则表达式）绑定给不同类型的文件。<br/>
Loader 可以通过 npm 发布和安装。<br/>
除了通过 package.json 的 main 指定，通常的模块也可以导出一个 loader 来使用。<br/>
Loader 可以访问配置。<br/>
插件可以让 loader 拥有更多特性。<br/>
Loader 可以分发出附加的任意文件。<br/>
Loader 本身也是运行在 node.js 环境中的 JavaScript 模块，它通常会返回一个函数。大多数情况下，我们通过 npm 来管理 loader，但是你也可以在项目中自己写 loader 模块。<br/>
Loader 可以在 require() 引用模块的时候添加，也可以在 webpack 全局配置中进行绑定，还可以通过命令行的方式使用。</p>

<h3 id="toc_1">配置文件</h3>

<p>Webpack 在执行的时候，除了在命令行传入参数，还可以通过指定的配置文件来执行。默认情况下，会搜索当前目录的 webpack.config.js 文件，这个文件是一个 node.js 模块，返回一个 json 格式的配置信息对象，或者通过 &ndash;config 选项来指定配置文件。</p>

<pre><code class="language-{">  &quot;name&quot;: &quot;webpack-example&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;A simple webpack example.&quot;,
  &quot;main&quot;: &quot;bundle.js&quot;,
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;
  },
  &quot;keywords&quot;: [
    &quot;webpack&quot;
  ],
  &quot;author&quot;: &quot;zhaoda&quot;,
  &quot;license&quot;: &quot;MIT&quot;,
  &quot;devDependencies&quot;: {
    &quot;css-loader&quot;: &quot;^0.21.0&quot;,
    &quot;style-loader&quot;: &quot;^0.13.0&quot;,
    &quot;webpack&quot;: &quot;^1.12.2&quot;
  }
}
</code></pre>

<h3 id="toc_2">commonJS规范</h3>

<p>CommonJS规范包括了模块（modules）、包（packages）、系统（system）、二进制（binary）、控制台（console）、编码（encodings）、文件系统（filesystems）、套接字（sockets）、单元测试（unit testing）等部分。目前大部分标准都在拟定和讨论之中，已经发布的标准有Modules/1.0、Modules/1.1、Modules/1.1.1、Packages/1.0、System/1.0。</p>

<h3 id="toc_3">AMD规范</h3>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微信小程序中使用字体图标]]></title>
    <link href="/atom.xml/14882669616759.html"/>
    <updated>2017-02-28T15:29:21+08:00</updated>
    <id>/atom.xml/14882669616759.html</id>
    <content type="html"><![CDATA[
<p>最近在做小程序方面的工作,小程序icon组件图标很少,又不想使用css背景图或者直接引入imgage,直接@font-face .ttf .woff字体，会有跨域问题。写到页面里吧。</p>

<p>只能转base64了吧，而且纯手工转，icomoon Encode embed css不知道从什么时候起已经开始收费了😭<br/>
在线转换网址：<a href="https://www.giftofspeed.com/base64-encoder/">https://www.giftofspeed.com/base64-encoder/</a></p>

<pre><code class="language-@font-face">font-family:&#39;font-name&#39;;
src:url(data:application/x-font-ttf;charset=utf-8;base64,*** format(&#39;truetype&#39;);
</code></pre>

<p>在小程序内就不存在字体格式兼容性问题，用ttf就行了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[es6学习笔记]]></title>
    <link href="/atom.xml/14890321432064.html"/>
    <updated>2017-03-09T12:02:23+08:00</updated>
    <id>/atom.xml/14890321432064.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">class类</h2>

<h2 id="toc_1">let变量</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Http权威指南]]></title>
    <link href="/atom.xml/14891384503601.html"/>
    <updated>2017-03-10T17:34:10+08:00</updated>
    <id>/atom.xml/14891384503601.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git远程操作]]></title>
    <link href="/atom.xml/14882736341680.html"/>
    <updated>2017-02-28T17:20:34+08:00</updated>
    <id>/atom.xml/14882736341680.html</id>
    <content type="html"><![CDATA[
<p><strong>git分支操作</strong><br/>
git查看本地分支，带星号的为当前开发的分支。</p>

<pre><code>$git branch -a //查看所有分支      
master
* newblog

$git push origin :master;//删除远程master分支
$git branch -D newbranch;//删除本地master分支
$git checkout newbranch//切换分支
</code></pre>

]]></content>
  </entry>
  
</feed>
