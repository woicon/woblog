<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[woiconBlog]]></title>
  <link href="/atom.xml/atom.xml" rel="self"/>
  <link href="/atom.xml/"/>
  <updated>2017-05-03T16:16:24+08:00</updated>
  <id>/atom.xml/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[HTML5 进阶系列：拖放 API 实现拖放排序]]></title>
    <link href="/atom.xml/14937786660187.html"/>
    <updated>2017-05-03T10:31:06+08:00</updated>
    <id>/atom.xml/14937786660187.html</id>
    <content type="html"><![CDATA[
<p>HTML5 中提供了直接拖放的 API，极大的方便我们实现拖放效果，不需要去写一大堆的 js，只需要通过监听元素的拖放事件就能实现各种拖放功能。</p>

<p>想要拖放某个元素，必须设置该元素的 draggable 属性为 true，当该属性为 false 时，将不允许拖放。而 img 元素和 a 元素都默认设置了 draggable 属性为 true，可直接拖放，如果不想拖放这两个元素，把属性设为 false 即可。</p>

<h2 id="toc_0">拖放事件</h2>

<p>拖放事件由不同的元素产生。一个元素被拖放，他可能会经过很多个元素上，最终到达想要放置的元素内。这里，我暂时把被拖放的元素称为源对象，被经过的元素称为过程对象，到达的元素我称为目标对象。不同的对象产生不同的拖放事件。</p>

<h2 id="toc_1">源对象：</h2>

<ul>
<li><p>dragstart：源对象开始拖放。</p></li>
<li><p>drag：源对象拖放过程中。</p></li>
<li><p>dragend：源对象拖放结束。</p></li>
</ul>

<h2 id="toc_2">过程对象：</h2>

<ul>
<li><p>dragenter：源对象开始进入过程对象范围内。</p></li>
<li><p>dragover：源对象在过程对象范围内移动。</p></li>
<li><p>dragleave：源对象离开过程对象的范围。</p></li>
</ul>

<h2 id="toc_3">目标对象：</h2>

<ul>
<li>drop：源对象被拖放到目标对象内。</li>
</ul>

<pre><code>&lt;div id=&quot;source&quot; draggable=&quot;true&quot;&gt;a元素&lt;/div&gt;
&lt;div id=&quot;process&quot;&gt;b元素&lt;/div&gt;
&lt;div id=&quot;target&quot;&gt;c元素&lt;/div&gt;
&lt;script&gt;
    var source = document.getElementById(&#39;source&#39;),     // a元素
        process = document.getElementById(&#39;process&#39;),   // b元素
        target = document.getElementById(&#39;target&#39;);     // c元素
    
    source.addEventListener(&#39;dragstart&#39;,function(ev){   // dragstart事件由a元素产生
        console.log(&#39;a元素开始被拖动&#39;);
    },false)

    process.addEventListener(&#39;dragenter&#39;,function(ev){  // dragenter事件由b元素产生
        console.log(&#39;a元素开始进入b元素&#39;);
    },false)
    process.addEventListener(&#39;dragleave&#39;,function(ev){  // dragleave事件由b元素产生
        console.log(&#39;a元素离开b元素&#39;);
    },false)

    target.addEventListener(&#39;drop&#39;,function(ev){        // drop事件由c元素产生
        console.log(&#39;a元素拖放到c元素了&#39;);
        ev.preventDefault();
    },false)
    document.ondragover = function(e){e.preventDefault();}
&lt;/script&gt;
</code></pre>

<h2 id="toc_4">dataTransfer 对象</h2>

<p>在所有拖放事件中提供了一个数据传递对象 dataTransfer，用于在源对象和目标对象间传递数据。接下来认识一下这个对象的方法和属性，来了解它是如何传递数据的。</p>

<h2 id="toc_5">setData()</h2>

<p>该方法向 dataTransfer 对象中存入数据。接收两个参数，第一个表示要存入数据种类的字符串，现在支持有以下几种：</p>

<p>text/plain：文本文字。</p>

<p>text/html：HTML文字。</p>

<p>text/xml：XML文字。</p>

<p>text/uri-list：URL列表，每个URL为一行。</p>

<p>第二个参数为要存入的数据。例如：</p>

<p><code><br/>
event.dataTransfer.setData(&#39;text/plain&#39;,&#39;Hello World&#39;);<br/>
getData()<br/>
</code></p>

<p>该方法从 dataTransfer 对象中读取数据。参数为在 setData 中指定的数据种类。例如：</p>

<p><code><br/>
event.dataTransfer.getData(&#39;text/plain&#39;);<br/>
clearData()<br/>
</code></p>

<p>该方法清除 dataTransfer 对象中存放的数据。参数可选，为数据种类。若参数为空，则清空所有种类的数据。例如：</p>

<h2 id="toc_6">event.dataTransfer.clearData();</h2>

<h2 id="toc_7">setDragImage()</h2>

<p>该方法通过用img元素来设置拖放图标。接收三个参数，第一个为图标元素，第二个为图标元素离鼠标指针的X轴位移量，第三个为图标元素离鼠标指针的Y轴位移量。例如：</p>

<pre><code>var source = document.getElementById(&#39;source&#39;),
    icon = document.createElement(&#39;img&#39;);

icon.src = &#39;img.png&#39;;

source.addEventListener(&#39;dragstart&#39;,function(ev){
    ev.dataTransfer.setDragImage(icon,-10,-10)
},false)
</code></pre>

<h2 id="toc_8">effectAllowed 和 dropEffect 属性</h2>

<p>这两个属性结合起来设置拖放的视觉效果。</p>

<p>值得注意的是：dataTransfer 对象不支持IE。对，不支持IE。</p>

<p>实现拖放排序</p>

<p>上面已经熟悉了拖放 API 的使用，我们来实现个简单的拖放排序，这也是在项目中比较常见的。先来理一下思路：</p>

<p>在一个列表中，每个元素都可以被拖放，那首先要给每个元素设置 draggable 属性为 true。</p>

<p>监听每个元素的 dragstart 事件，对源对象做样式处理来区分。</p>

<p>监听每个元素的 dragenter 事件，当源对象进入到当前元素里，就把源对象添加到该元素之前。这样子后面的元素就会被源对象挤下去了，实现了排序的效果。</p>

<p>但是会发现，源对象无法排到最后一个去，只能在倒数第二。这时就要监听 dragleave 事件，当过程对象是最后一个元素时，源对象离开了过程对象，这时就把源对象添加到最后去。</p>

<p>主要代码如下：</p>

<pre><code>var source = document.querySelectorAll(&#39;.list&#39;),
    dragElement = null;

for(var i = 0; i &lt; source.length; i++){
    source[i].addEventListener(&#39;dragstart&#39;,function(ev){
        dragElement = this;
    },false);

    source[i].addEventListener(&#39;dragenter&#39;, function(ev){
        if(dragElement != this){
            this.parentNode.insertBefore(dragElement,this);
        }
    }, false)

    source[i].addEventListener(&#39;dragleave&#39;, function(ev){
        if(dragElement != this){
            if(this == this.parentNode.lastElementChild || this == this.parentNode.lastChild){
                this.parentNode.appendChild(dragElement);
            }
        }
    }, false)
};

document.ondragover = function(e){e.preventDefault();}
document.ondrop = function(e){e.preventDefault();}
</code></pre>

<h2 id="toc_9">兼容</h2>

<p>主要是在IE中的兼容不太好，不过至少在IE10中能兼容上面的拖动排序。</p>

<p>而且在我简单的试验中发现，就是在 IE 中元素不设置 height 的时候，不会触发 dragleave 事件。</p>

<p>更重要的一点是在 ios 和安卓上，完全不兼容。不过还好，有一个插件能让它在移动端完美兼容。<br/>
插件地址：ios-html5-drag-drop-shim</p>

<p>只需要在原有的代码中引入该插件，即可在移动端上实现拖动了。</p>

<pre><code>&lt;script&gt;
var iosDragDropShim = { enableEnterLeave: true }
&lt;/script&gt;
&lt;script src=&quot;vendor/ios-drag-drop.js&quot;&gt;&lt;/script&gt;
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript animatio动画事件]]></title>
    <link href="/atom.xml/14930210074983.html"/>
    <updated>2017-04-24T16:03:27+08:00</updated>
    <id>/atom.xml/14930210074983.html</id>
    <content type="html"><![CDATA[
<p>判断css animatio动画是否完成， animationend是判断css3在动画完成后执行事件。</p>

<pre><code>object.addEventListener(&quot;webkitAnimationEnd&quot;, myScript);  // Chrome, Safari 和 Opera
object.addEventListener(&quot;animationend&quot;, myScript);        // 标准语法
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GARMIN 225蓝牙连接问题]]></title>
    <link href="/atom.xml/14927366229693.html"/>
    <updated>2017-04-21T09:03:42+08:00</updated>
    <id>/atom.xml/14927366229693.html</id>
    <content type="html"><![CDATA[
<p>手表最近总是连接不上手机。<br/>
1. 手表关机，关闭手机蓝牙；<br/>
2. 等待五秒后，同时按住B键+C键；<br/>
3. 步骤2按住不放，再按住A键不放，此时同时按住ABC三个键；<br/>
4. 等待几秒, 听到哔一声，放开A键，此时仍同时按住BC两个键<br/>
5. 等待几秒（可能会很长时间，耐心等），听到哔一声，放开C键;<br/>
6. 等待几秒, 听到哔一声， 放开B键；<br/>
7. 成功后会出现第一次开机的情况（显示简体中文字样）， 可以接着把225的各项设置逐一完成；<br/>
8. 把手机Connect APP中注册的225手表先删除；<br/>
9. 手机重新开机，开启蓝牙；<br/>
10. 开启手表225的蓝牙配对，设置&gt;蓝牙&gt;移动设备配对<br/>
11. 开启手机Garmin Connect app，设备&gt; &ldquo;+&rdquo;&gt; 健身 &gt; forerunner 225 &gt;搜寻。</p>

<p>以上做完后, 就会看到手机上出现询问配对码是否正确的对话框，确定之后就会连接、注册且完成同步了。<br/>
以后只要开启Garmin connect, 按手表的跑步键两次，等待几秒，就会正常同步。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[es6入门]]></title>
    <link href="/atom.xml/14926503124149.html"/>
    <updated>2017-04-20T09:05:12+08:00</updated>
    <id>/atom.xml/14926503124149.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">let和const命令</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[设计模式开发实践]]></title>
    <link href="/atom.xml/14901536948215.html"/>
    <updated>2017-03-22T11:34:54+08:00</updated>
    <id>/atom.xml/14901536948215.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WOUI的CSS的编写规范]]></title>
    <link href="/atom.xml/14889572496788.html"/>
    <updated>2017-03-08T15:14:09+08:00</updated>
    <id>/atom.xml/14889572496788.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">写在前面</h3>

<p>所有的CSS语法是不区分大小写的ASCII范围（即，i.e., [a-z] and [A-Z]是等价的）中，除了部分不属于CSS的控制之下。例如，在HTML中值的区分大小写属性“ID”的字体名称和“class”，和URI就在于本规范的范围之内。请特别注意，元素名称是不区分大小写的HTML，但区分大小写的XML。</p>

<h3 id="toc_1">使用less预编译提高效率</h3>

<p>层级深度不超过三级。</p>

<h2 id="toc_2">书写规则</h2>

<h3 id="toc_3">class命名</h3>

<p>class 名称中只能出现小写字符和连字符（不是下划线，也不是驼峰命名法）。连字符应当用于相关 class 的命名（类似于命名空间）（例如，.btn 和 .btn-danger）。<br/>
避免过度任意的简写。.btn 代表 button，但是 .s 不能表达任何意思。<br/>
class 名称应当尽可能短，并且意义明确。<br/>
使用有意义的名称。使用有组织的或目的明确的名称，不要使用表现形式（presentational）的名称。<br/>
基于最近的父 class 或基本（base） class 作为新 class 的前缀。<br/>
使用 .js-* class 来标识行为（与样式相对），并且不要将这些 class 包含到 CSS 文件中。</p>

<h3 id="toc_4">避免过深的层级</h3>

<h3 id="toc_5">CSS属性书写顺序</h3>

<p>1.位置属性(position, top, right, z-index, display, float等)<br/>
2.大小(width, height, padding, margin)<br/>
3.文字系列(font, line-height, letter-spacing, color- text-align等)<br/>
4.背景(background, border等)<br/>
5.其他(animation, transition等)</p>

<h3 id="toc_6">使用缩写</h3>

<p>CSS有些属性是可以缩写的，比如padding,margin,font等等，这样精简代码同时又能提高用户的阅读体验。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阿米巴经营]]></title>
    <link href="/atom.xml/14882775961284.html"/>
    <updated>2017-02-28T18:26:36+08:00</updated>
    <id>/atom.xml/14882775961284.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[module.exports浅析]]></title>
    <link href="/atom.xml/14882686442912.html"/>
    <updated>2017-02-28T15:57:24+08:00</updated>
    <id>/atom.xml/14882686442912.html</id>
    <content type="html"><![CDATA[
<p>在开发一个复杂的应用程序的时候，我们需要把各个功能拆分、封装到不同的文件，在需要的时候引用该文件。没人会写一个几万行代码的文件，这样在可读性、复用性和维护性上都很差，几乎所有的编程语言都有自己的模块组织方式，比如Java中的包、C#中的程序集等，node.js使用模块和包来组织，其机制实现参照了CommonJS标准，虽未完全遵守，但差距不大，使用起来非常简单。</p>

<h3 id="toc_0">什么是模块？</h3>

<p>在node.js中模块与文件是一一对应的，也就是说一个node.js文件就是一个模块，文件内容可能是我们封装好的一些JavaScript方法、JSON数据、编译过的C/C++拓展等，在关于node.js的误会提到过node.js的架构。<br/>
其中http、fs、net等都是node.js提供的核心模块，使用C/C++实现，外部用JavaScript封装。</p>

<h3 id="toc_1">创建、加载模块</h3>

<p>模块在node.js中的概念很简单，看看如何创建一个我们自己的模块供开发复用。</p>

<p>在node.js中创建模块非常简单，一个文件就是一个模块，所以我们创建一个test.js文件就创建了一个模块</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[webpack入坑记录]]></title>
    <link href="/atom.xml/14882669814482.html"/>
    <updated>2017-02-28T15:29:41+08:00</updated>
    <id>/atom.xml/14882669814482.html</id>
    <content type="html"><![CDATA[
<p>Webpack 会分析入口文件，解析包含依赖关系的各个文件。这些文件（模块）都打包到 bundle.js 。Webpack 会给每个模块分配一个唯一的 id 并通过这个 id 索引和访问模块。在页面启动时，会先执行 entry.js 中的代码，其它模块会在运行 require 的时候再执行。</p>

<h3 id="toc_0">Loader</h3>

<p>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。</p>

<p>Loader 可以理解为是模块和资源的转换器，它本身是一个函数，接受源文件作为参数，返回转换的结果。这样，我们就可以通过 require 来加载任何类型的模块或文件，比如 CoffeeScript、 JSX、 LESS 或图片。</p>

<p><strong>loader 有哪些特性？</strong><br/>
Loader 可以通过管道方式链式调用，每个 loader 可以把资源转换成任意格式并传递给下一个 loader ，但是最后一个 loader 必须返回 JavaScript。<br/>
Loader 可以同步或异步执行。<br/>
Loader 运行在 node.js 环境中，所以可以做任何可能的事情。<br/>
Loader 可以接受参数，以此来传递配置项给 loader。<br/>
Loader 可以通过文件扩展名（或正则表达式）绑定给不同类型的文件。<br/>
Loader 可以通过 npm 发布和安装。<br/>
除了通过 package.json 的 main 指定，通常的模块也可以导出一个 loader 来使用。<br/>
Loader 可以访问配置。<br/>
插件可以让 loader 拥有更多特性。<br/>
Loader 可以分发出附加的任意文件。<br/>
Loader 本身也是运行在 node.js 环境中的 JavaScript 模块，它通常会返回一个函数。大多数情况下，我们通过 npm 来管理 loader，但是你也可以在项目中自己写 loader 模块。<br/>
Loader 可以在 require() 引用模块的时候添加，也可以在 webpack 全局配置中进行绑定，还可以通过命令行的方式使用。</p>

<h3 id="toc_1">配置文件</h3>

<p>Webpack 在执行的时候，除了在命令行传入参数，还可以通过指定的配置文件来执行。默认情况下，会搜索当前目录的 webpack.config.js 文件，这个文件是一个 node.js 模块，返回一个 json 格式的配置信息对象，或者通过 &ndash;config 选项来指定配置文件。</p>

<pre><code class="language-{">  &quot;name&quot;: &quot;webpack-example&quot;,
  &quot;version&quot;: &quot;1.0.0&quot;,
  &quot;description&quot;: &quot;A simple webpack example.&quot;,
  &quot;main&quot;: &quot;bundle.js&quot;,
  &quot;scripts&quot;: {
    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;
  },
  &quot;keywords&quot;: [
    &quot;webpack&quot;
  ],
  &quot;author&quot;: &quot;zhaoda&quot;,
  &quot;license&quot;: &quot;MIT&quot;,
  &quot;devDependencies&quot;: {
    &quot;css-loader&quot;: &quot;^0.21.0&quot;,
    &quot;style-loader&quot;: &quot;^0.13.0&quot;,
    &quot;webpack&quot;: &quot;^1.12.2&quot;
  }
}
</code></pre>

<h3 id="toc_2">commonJS规范</h3>

<p>CommonJS规范包括了模块（modules）、包（packages）、系统（system）、二进制（binary）、控制台（console）、编码（encodings）、文件系统（filesystems）、套接字（sockets）、单元测试（unit testing）等部分。目前大部分标准都在拟定和讨论之中，已经发布的标准有Modules/1.0、Modules/1.1、Modules/1.1.1、Packages/1.0、System/1.0。</p>

<h3 id="toc_3">AMD规范</h3>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[微信小程序中使用字体图标]]></title>
    <link href="/atom.xml/14882669616759.html"/>
    <updated>2017-02-28T15:29:21+08:00</updated>
    <id>/atom.xml/14882669616759.html</id>
    <content type="html"><![CDATA[
<p>最近在做小程序方面的工作,小程序icon组件图标很少,又不想使用css背景图或者直接引入imgage,直接@font-face .ttf .woff字体，会有跨域问题。写到页面里吧。</p>

<p>只能转base64了吧，而且纯手工转，icomoon Encode embed css不知道从什么时候起已经开始收费了😭<br/>
在线转换网址：<a href="https://www.giftofspeed.com/base64-encoder/">https://www.giftofspeed.com/base64-encoder/</a></p>

<pre><code class="language-@font-face">font-family:&#39;font-name&#39;;
src:url(data:application/x-font-ttf;charset=utf-8;base64,*** format(&#39;truetype&#39;);
</code></pre>

<p>在小程序内就不存在字体格式兼容性问题，用ttf就行了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[es6学习笔记]]></title>
    <link href="/atom.xml/14890321432064.html"/>
    <updated>2017-03-09T12:02:23+08:00</updated>
    <id>/atom.xml/14890321432064.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">class类</h2>

<h2 id="toc_1">let变量</h2>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Http权威指南]]></title>
    <link href="/atom.xml/14891384503601.html"/>
    <updated>2017-03-10T17:34:10+08:00</updated>
    <id>/atom.xml/14891384503601.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[认识和使用Promise，重构你的Js代码]]></title>
    <link href="/atom.xml/14939478964540.html"/>
    <updated>2017-05-05T09:31:36+08:00</updated>
    <id>/atom.xml/14939478964540.html</id>
    <content type="html"><![CDATA[
<p>一直以来，JavaScript处理异步都是以callback的方式，在前端开发领域callback机制几乎深入人心。在设计API的时候，不管是浏览器厂商还是SDK开发商亦或是各种类库的作者，基本上都已经遵循着callback的套路。近几年随着JavaScript开发模式的逐渐成熟，CommonJS规范顺势而生，其中就包括提出了Promise规范，Promise完全改变了js异步编程的写法，让异步编程变得十分的易于理解。今天我们就来了解一下Promise。</p>

<h3 id="toc_0">一 、初识Promise</h3>

<p>Promise可能大家都不陌生，因为Promise规范已经出来好一段时间了，同时Promise也已经纳入了ES6，而且高版本的chrome、firefox浏览器都已经原生实现了Promise，只不过和现如今流行的类Promise类库相比少些API。</p>

<p><strong>1、什么是promise？</strong><br/>
　　所谓Promise，字面上可以理解为“承诺”，就是说A调用B，B返回一个“承诺”给A，然后A就可以在写计划的时候这么写：当B返回结果给我的时候，A执行方案S1，反之如果B因为什么原因没有给到A想要的结果，那么A执行应急方案S2，这样一来，所有的潜在风险都在A的可控范围之内了。</p>

<p>Promise规范如下：<br/>
* 一个promise可能有三种状态：等待（pending）、已完成（fulfilled）、已拒绝（rejected）<br/>
* 一个promise的状态只可能从“等待”转到“完成”态或者“拒绝”态，不能逆向转换，同时“完成”态和“拒绝”态不能相互转换<br/>
* promise必须实现then方法（可以说，then就是promise的核心），而且then必须返回一个promise，同一个promise的then可以调用多次，并且回调的执行顺序跟它们被定义时的顺序一致<br/>
* then方法接受两个参数，第一个参数是成功时的回调，在promise由“等待”态转换到“完成”态时调用，另一个是失败时的回调，在promise由“等待”态转换到“拒绝”态时调用。同时，then可以接受另一个promise传入，也接受一个“类then”的对象或方法，即thenable对象。</p>

<p><strong>2.promise原理分析</strong><br/>
      可以看到promise的规范并不是很多，下面我们一边分析promise一边自己写一个promise的实现。Promise实现的大致思路如下：</p>

<p>　　构造函数Promise接受一个函数resolver，可以理解为传入一个异步任务，resolver接受两个参数，一个是成功时的回调，一个是失败时的回调，这两参数和通过then传入的参数是对等的。</p>

<p>其次是then的实现，由于Promise要求then必须返回一个promise，所以在then调用的时候会新生成一个promise，挂在当前promise的_next上，同一个promise多次调用都只会返回之前生成的_next。</p>

<p>由于then方法接受的两个参数都是可选的，而且类型也没限制，可以是函数，也可以是一个具体的值，还可以是另一个promise。下面是then的具体实现：</p>

<pre><code>Promise.prototype.then = function(resolve, reject) {  
    var next = this._next || (this._next = Promise());  
    var status = this.status;  
    var x;  
  
    if(&#39;pending&#39; === status) {  
        isFn(resolve) &amp;&amp; this._resolves.push(resolve);  
        isFn(reject) &amp;&amp; this._rejects.push(reject);  
        return next;  
    }  
  
    if(&#39;resolved&#39; === status) {  
        if(!isFn(resolve)) {  
            next.resolve(resolve);  
        } else {  
            try {  
                x = resolve(this.value);  
                resolveX(next, x);  
            } catch(e) {  
                this.reject(e);  
            }  
        }  
        return next;  
    }  
  
    if(&#39;rejected&#39; === status) {  
        if(!isFn(reject)) {  
            next.reject(reject);  
        } else {  
            try {  
                x = reject(this.reason);  
                resolveX(next, x);  
            } catch(e) {  
                this.reject(e);  
            }  
        }  
        return next;  
    }  
};
</code></pre>

<p>这里，then做了简化，其他promise类库的实现比这个要复杂得多，同时功能也更多，比如还有第三个参数——notify，表示promise当前的进度，这在设计文件上传等时很有用。对then的各种参数的处理是最复杂的部分，有兴趣的同学可以参看其他类Promise库的实现。</p>

<p>在then的基础上，应该还需要至少两个方法，分别是完成promise的状态从pending到resolved或rejected的转换，同时执行相应的回调队列，即resolve()和reject()方法。</p>

<p>到此，一个简单的promise就设计完成了，下面简单实现下两个promise化的函数：</p>

<pre><code>function sleep(ms) {  
    return function(v) {  
        var p = Promise();  
  
        setTimeout(function() {  
            p.resolve(v);  
        });  
  
        return p;  
    };  
};  
  
function getImg(url) {  
    var p = Promise();  
    var img = new Image();  
  
    img.onload = function() {  
        p.resolve(this);  
    };  
  
    img.onerror = function(err) {  
        p.reject(err);  
    };  
  
    img.url = url;  
  
    return p;  
};
</code></pre>

<p>由于Promise构造函数接受一个异步任务作为参数，所以getImg还可以这样调用：</p>

<pre><code>function getImg(url) {  
    return Promise(function(resolve, reject) {  
        var img = new Image();  
  
        img.onload = function() {  
            resolve(this);  
        };  
  
        img.onerror = function(err) {  
            reject(err);  
        };  
  
        img.url = url;  
    });  
};
</code></pre>

<p>接下来（见证奇迹的时刻），假设有一个BT的需求要这么实现：异步获取一个json配置，解析json数据拿到里边的图片，然后按顺序队列加载图片，每张图片加载时给个loading效果，</p>

<pre><code class="language-function">    $(&#39;#list&#39;).find(&#39;&gt; li:last-child&#39;).html(&#39;&#39;).append(img);  
};  
  
function prepend() {  
    $(&#39;&lt;li&gt;&#39;)  
        .html(&#39;loading...&#39;)  
        .appendTo($(&#39;#list&#39;));  
};  
  
function run() {  
    $(&#39;#done&#39;).hide();  
    getData(&#39;map.json&#39;)  
        .then(function(data) {  
            $(&#39;h4&#39;).html(data.name);  
  
            return data.list.reduce(function(promise, item) {  
                return promise  
                    .then(prepend)  
                    .then(sleep(1000))  
                    .then(function() {  
                        return getImg(item.url);  
                    })  
                    .then(addImg);  
            }, Promise.resolve());  
        })  
        .then(sleep(300))  
        .then(function() {  
            $(&#39;#done&#39;).show();  
        });  
};  
  
$(&#39;#run&#39;).on(&#39;click&#39;, run);
</code></pre>

<p>这里的sleep只是为了看效果加的，可猛击查看demo！</p>

<p>在这里，Promise.resolve(v)静态方法只是简单返回一个以v为肯定结果的promise，v可不传入，也可以是一个函数或者是一个包含then方法的对象或函数（即thenable）。</p>

<p>类似的静态方法还有Promise.cast(promise)，生成一个以promise为肯定结果的promise；Promise.reject(reason)，生成一个以reason为否定结果的promise。</p>

<p>我们实际的使用场景可能很复杂，往往需要多个异步的任务穿插执行，并行或者串行同在。这时候，可以对Promise进行各种扩展，比如实现Promise.all()，接受promises队列并等待他们完成再继续，再比如Promise.any()，promises队列中有任何一个处于完成态时即触发下一步操作。</p>

<p><strong>3.标准的Promise</strong></p>

<p>可参考html5rocks的这篇文章JavaScript Promises，目前高级浏览器如Chrome、Firefox都已经内置了Promise对象，提供更多的操作接口，比如Promise.all()，支持传入一个promises数组，当所有promises都完成时执行then，还有就是更加友好强大的异常捕获，应对日常的异步编程，应该足够了。</p>

<p>　　现今流行的各大js库，几乎都不同程度的实现了Promise，如dojo，jQuery、Zepto、when.js、Q等，只是暴露出来的大都是Deferred对象,当然还有angularJs中的\(q.这里以jQuery为例，说一下：<br/>
　　<br/>
&ldquo;`// animate  <br/>
\)(&lsquo;.box&rsquo;)<br/><br/>
    .animate({&lsquo;opacity&rsquo;: 0}, 1000)<br/><br/>
    .promise()<br/><br/>
    .then(function() {<br/><br/>
        console.log(&lsquo;done&rsquo;);<br/><br/>
    });  </p>

<p>// ajax<br/><br/>
\(.ajax(options).then(success, fail);  <br/>
\).ajax(options).done(success).fail(fail);  </p>

<p>// ajax queue<br/><br/>
\(.when(\).ajax(options1), $.ajax(options2))<br/><br/>
    .then(function() {<br/><br/>
        console.log(&lsquo;all done.&rsquo;);<br/><br/>
    }, function() {<br/><br/>
        console.error(&lsquo;There something wrong.&rsquo;);<br/><br/>
    });<br/>
&rdquo;`</p>

<h3 id="toc_1">二 、用Promise组织你的JavaScript代码</h3>

<p>上面我们了解了Promise，相信大家对Promise有了一定的认识。下面我们开始动手来写代码，通过几个简单的例子，来加深理解。这里我们使用浏览器自带的Promise，首先我们要先检测一些浏览器是否支持Promise，其实很简单，如果是谷歌浏览器，按下F12,打开控制台，如图：<br/>
<img src="media/14939478964540/14939482078077.jpg" alt=""/><br/>
这里我们可以看到Promise的type是function，也就是说谷歌浏览器是支持promise的。以此为原理，我们可以写一段JavaScript代码来检测，代码如下：</p>

<pre><code class="language-if(typeof(Promise)">    alert(&quot;支持Promise&quot;);
}
else{
    alert(&quot;不支持Promise&quot;);
}
</code></pre>

<p>经过检测，发现IE11竟然不支持promise.建议大家用谷歌浏览器来进行测试吧。</p>

<p>我们首先来写一个等待的方法，如下：</p>

<pre><code class="language-function">    return new Promise(function(resolve, reject) {
        setTimeout(resolve,duration);
    })
}
</code></pre>

<p>测试这个方法的代码如下：wait(5000).then(function(){alert(&lsquo;hello&rsquo;)})，这段代码很简单，就是等待5秒以后执行一个回调，弹出一个消息。当然，你还可以这样写：</p>

<pre><code class="language-wait(5000).then(function(){alert(&#39;hello&#39;)}).then(function(){console.log(&#39;world&#39;)})"></code></pre>

<p>怎么样？很简单吧~~</p>

<p>下面来看一些我从网上收集的一些常用的JavaScript的promise的写法：</p>

<pre><code class="language-function">    return http(uri, &#39;GET&#39;, null);
}

function post(uri,data){
    if(typeof data === &#39;object&#39; &amp;&amp; !(data instanceof String || (FormData &amp;&amp; data instanceof FormData))) {
        var params = [];
        for(var p in data) {
            if(data[p] instanceof Array) {
                for(var i = 0; i &lt; data[p].length; i++) {
                    params.push(encodeURIComponent(p) + &#39;[]=&#39; + encodeURIComponent(data[p][i]));
                }
            } else {
                params.push(encodeURIComponent(p) + &#39;=&#39; + encodeURIComponent(data[p]));
            }
        }
        data = params.join(&#39;&amp;&#39;);
    }


    return http(uri, &#39;POST&#39;, data || null, {
        &quot;Content-type&quot;:&quot;application/x-www-form-urlencoded&quot;
    });
}

function http(uri,method,data,headers){
    return new Promise(function(resolve, reject) {
        var xhr = new XMLHttpRequest();
        xhr.open(method,uri,true);
        if(headers) {
            for(var p in headers) {
                xhr.setRequestHeader(p, headers[p]);
            }
        }
        xhr.addEventListener(&#39;readystatechange&#39;,function(e){
            if(xhr.readyState === 4) {
                if(String(xhr.status).match(/^2\d\d$/)) {
                    resolve(xhr.responseText);
                } else {
                    reject(xhr);
                }
            }
        });
        xhr.send(data);
    })
}

function wait(duration){
    return new Promise(function(resolve, reject) {
        setTimeout(resolve,duration);
    })
}

function waitFor(element,event,useCapture){
    return new Promise(function(resolve, reject) {
        element.addEventListener(event,function listener(event){
            resolve(event)
            this.removeEventListener(event, listener, useCapture);
        },useCapture)
    })
}

function loadImage(src) {
    return new Promise(function(resolve, reject) {
        var image = new Image;
        image.addEventListener(&#39;load&#39;,function listener() {
            resolve(image);
            this.removeEventListener(&#39;load&#39;, listener, useCapture);
        });
        image.src = src;
        image.addEventListener(&#39;error&#39;,reject);
    })
}

function runScript(src) {
    return new Promise(function(resolve, reject) {
        var script = document.createElement(&#39;script&#39;);
        script.src = src;
        script.addEventListener(&#39;load&#39;,resolve);
        script.addEventListener(&#39;error&#39;,reject);
        (document.getElementsByTagName(&#39;head&#39;)[0] || document.body || document.documentElement).appendChild(script);
    })
}

function domReady() {
    return new Promise(function(resolve, reject) {
        if(document.readyState === &#39;complete&#39;) {
            resolve();
        } else {
            document.addEventListener(&#39;DOMContentLoaded&#39;,resolve);
        }
    })
}
</code></pre>

<p>看到了吧，Promise风格API跟回调风格的API不同，它的参数跟同步的API是一致的，但是它的返回值是个Promise对象，要想得到真正的结果，需要在then的回调里面拿到。</p>

<h3 id="toc_2">三、用Promise组织JavaScript异步代码</h3>

<p>在比较复杂的页面中，我们会使用到大量的异步操作。我们来看看使用Promise会带来怎样的便利吧。<br/>
<strong>1、多个异步调用，同步/并行</strong><br/>
　例如我们页面调用了好几个异步函数，我们要等待所有的异步函数执行完成后，做一些操作，如弹出一个消息框提示用户操作成功。下面我们拿一个例子来说明一下：</p>

<p>Promise.all跟then的配合，可以视为调用部分参数为Promise提供的函数。譬如，我们现在有一个接受三个参数的函数：</p>

<pre><code class="language-function">    console.log(a + b + c);
}
</code></pre>

<p>现在我们调用print函数，其中a和b是需要异步获取的：</p>

<pre><code class="language-var">
print(geta(), getb(), 10); //这是同步的写法

Promise.all([geta(), getb(), 10]).then(print); //这是 primise 的异步写法
</code></pre>

<p>如果用callback的话，我们就只能一个一个调用了，调用完了geta,然后在其回调函数里面调用getb，最后在getb的回调函数中调用print方法。串行和并行哪个更快，大家很清楚吧~~</p>

<p>** 2.竞争**<br/>
 　　如果说Primise.all是promise对象之间的“与”关系，那么Promise.race就是promise对象之间的“或”关系。比如，我要实现“点击按钮或者5秒钟之后执行”：</p>

<pre><code class="language-　　var">
Promise.race(wait(5000), waitFor(btn, click)).then(function(){
    console.log(&#39;run!&#39;)
})
</code></pre>

<p><strong>3.异常处理</strong><br/>
 　　异常处理一直是回调的难题，而promise提供了非常方便的catch方法：在一次promise调用中，任何的环节发生reject，都可以在最终的catch中捕获到：</p>

<pre><code class="language-　　Promise.resolve().then(function(){">    return loadImage(img1);
}).then(function(){
    return loadImage(img2);
}).then(function(){
    return loadImage(img3);
}).catch(function(err){
    //错误处理
})
</code></pre>

<p><strong>4.复杂流程</strong><br/>
接下来，我们来看比较复杂的情况。<br/>
promise有一种非常重要的特性：then的参数，理论上应该是一个promise函数，而如果你传递的是普通函数，那么默认会把它当做已经resolve了的promise函数。</p>

<p>这样的特性让我们非常容易把promise风格的函数跟已有代码结合起来。</p>

<p>为了方便传参数，我们编写一个currying函数，这是函数式编程里面的基本特性，在这里跟promise非常搭，所以就实现一下：</p>

<pre><code class="language-function">    var f = arguments[0];
    var args = Array.prototype.slice.call(arguments,1);
    return function(){
        args.push.apply(args,arguments);
        return f.apply(this,args);
    }
}
</code></pre>

<p>currying会给某个函数&quot;固化&quot;几个参数，并且返回接受剩余参数的函数。比如之前的函数，可以这么玩：</p>

<pre><code class="language-var">
print2(2, 3); //得到 11 + 2 + 3 的结果，16

var wait1s = currying(wait,1000);

wait1s().then(function(){
    console.log(&#39;after 1s!&#39;);
})
</code></pre>

<p>有了currying，我们就可以愉快地来玩链式调用了，比如以下代码：</p>

<pre><code class="language-Promise.race([">    domReady().then(currying(wait,5000)), 
    waitFor(btn, click)])
    .then(currying(runScript,&#39;a.js&#39;))
    .then(function(){
        console.log(&#39;loaded&#39;);
        return Promise.resolve();
    });
</code></pre>

<p>不管Promise实现怎么复杂，但是它的用法却很简单，组织的代码很清晰，从此不用再受callback的折磨了。promise作为一个新的API，它的API本身没有什么特别的功能，但是它背后代表的编程思路是很有价值的。</p>

<p>最后，Promise是如此的优雅！但Promise也只是解决了回调的深层嵌套的问题，真正简化JavaScript异步编程的还是Generator，在Node.js端，建议考虑Generator。</p>

<h3 id="toc_3">四 、参考资料</h3>

<p>JavaScript Promise迷你书（中文版）   <a href="http://liubin.github.io/promises-book/">http://liubin.github.io/promises-book/</a><br/>
JavaScript Promise启示录       <a href="http://www.csdn.net/article/2014-05-28/2819979-JavaScript-Promise">http://www.csdn.net/article/2014-05-28/2819979-JavaScript-Promise</a><br/>
用Promise组织程序                 <a href="http://www.w3ctech.com/topic/721">http://www.w3ctech.com/topic/721</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git远程操作]]></title>
    <link href="/atom.xml/14882736341680.html"/>
    <updated>2017-02-28T17:20:34+08:00</updated>
    <id>/atom.xml/14882736341680.html</id>
    <content type="html"><![CDATA[
<p><strong>git分支操作</strong><br/>
git查看本地分支，带星号的为当前开发的分支。</p>

<pre><code>$git branch -a //查看所有分支      
master
* newblog

$git push origin :master;//删除远程master分支
$git branch -D newbranch;//删除本地master分支
$git checkout newbranch//切换分支
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[question一些问题记录]]></title>
    <link href="/atom.xml/14937985253928.html"/>
    <updated>2017-05-03T16:02:05+08:00</updated>
    <id>/atom.xml/14937985253928.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">怎么用js创建一个class</h2>

<p>Javascipt语法不支持&quot;类&quot;（class），导致传统的面向对象编程方法无法直接使用。程序员们做了很多探索，研究如何用Javascript模拟&quot;类&quot;。<br/>
在面向对象编程中，类（class）是对象（object）的模板，定义了同一组对象（又称&quot;实例&quot;）共有的属性和方法。<br/>
Javascript语言不支持&quot;类&quot;，但是可以用一些变通的方法，模拟出&quot;类&quot;。</p>

<p><strong>构造函数法</strong></p>

<pre><code class="language-function">　this.name = &quot;zhangyan&quot;;
}
</code></pre>

<p>生成实例的时候，使用new关键字。</p>

<pre><code class="language-var">console.log(person.name); // zhangyan
</code></pre>

<p>类的属性和方法，还可以定义在构造函数的prototype对象之上。</p>

<pre><code class="language-person.prototype.makeSound">    console.log(&quot;喵喵喵&quot;);
}
</code></pre>

<p><strong>Object.create()法</strong></p>

<p>用这个方法，&quot;类&quot;就是一个对象，不是函数。</p>

<pre><code class="language-var">　　name: &quot;zhangyan&quot;,
　　makeSound: function(){ alert(&quot;喵喵喵&quot;); }
};
</code></pre>

<p>直接用Object.create()生成实例，不需要用到new。</p>

<pre><code class="language-var">console.log(cat1.name); // 大毛
person1.makeSound(); // 喵喵喵
</code></pre>

<blockquote>
<p>各大浏览器的最新版本（包括IE9）都支持这个方法。如果遇到老式浏览器，可以用下面的代码自行部署。</p>
</blockquote>

<pre><code class="language-if">    Object.create = function (o) {
        function F(){}
        F.prototype = o;
        return new F();
    };
}
</code></pre>

<p>这种方法比&quot;构造函数法&quot;简单，但是不能实现私有属性和私有方法，实例对象之间也不能共享数据，对&quot;类&quot;的模拟不够全面。</p>

<p><strong>极简主义法</strong><br/>
这种方法不使用this和prototype，代码部署起来非常简单，这大概也是它被叫做&quot;极简主义法&quot;的原因。<br/>
首先，它也是用一个对象模拟&quot;类&quot;。在这个类里面，定义一个构造函数createNew()，用来生成实例。</p>

<h2 id="toc_1">原生js实现ajax方法</h2>

<pre><code class="language-function">    //先声明一个异步请求对象
    var xmlHttpReg = null;
    if (window.ActiveXObject) {//如果是IE
            xmlHttpReg = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);
        } else if (window.XMLHttpRequest) {
            xmlHttpReg = new XMLHttpRequest(); //实例化一个xmlHttpReg
        }
        
        //如果实例化成功,就调用open()方法,就开始准备向服务器发送请求
        if (xmlHttpReg != null) {
        //  true表示该参数规定请求是否异步处理，True 表示脚本会在 send() 方法之后继续执行，而不等待来自服务器的响应。
        xmlHttpReg.open(&quot;get&quot;, &quot;About.aspx&quot;, true);
        xmlHttpReg.send(null);
        xmlHttpReg.onreadystatechange = doResult; //设置回调函数
    }
    //回调函数
    //一旦readyState的值改变,将会调用这个函数,readyState=4表示完成相应
    //设定函数doResult()
    function doResult() {
        if (xmlHttpReg.readyState == 4) {//4代表执行完成
          if (xmlHttpReg.status == 200) {//200代表执行成功
            }else{
          //失败
            }
        }
    }
}  
</code></pre>

]]></content>
  </entry>
  
</feed>
